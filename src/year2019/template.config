{
    # addr -> name
    # where to start exploring functions
    # the value is the name of the function. set to null if auto generate
    # set value to SKIP to not extract function at that address
    "functions": {
    },

    # if true, anything address containing ADD_BP #x will get extracted as a function
    # may yield false positives
    "auto_detect_functions": true,

    # if true, for every source code line, prepend with a comment line containing the opcode
    "opcodes_in_functions": true,

    # if true, functions return all their values; otherwise only one
    "return_all": true,

    # dump the opcodes from these addreses (until next function starts)
    # otherwise a mem dump will happen instead
    "opcode_dump": [],

    # a map of memory addresses to global variable names (that will be used instead)
    "global_variables": {
    },

    # a map of memory addresses to local variable names (that will be used instead)
    # the local variables will not be initialize, so dirty reads will cause run time errors
    "local_variables": {
    },

    # addr -> addr   overriding target address of jump if it can't be determined correctly
    "override_target_address": {
    },

    # addr -> [bool-array] with possible outcomes of a jump condition check
    "override_jump_conditions": {
    }
}
